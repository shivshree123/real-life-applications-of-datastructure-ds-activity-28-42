#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 5 // Maximum number of vehicles in the queue

// Structure for queue
typedef struct {
    char vehicles[MAX][20]; // Array to hold vehicle names
    int front;
    int rear;
} Queue;

// Function to initialize the queue
void initializeQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is full
int isFull(Queue *q) {
    return q->rear == MAX - 1;
}

// Function to check if the queue is empty
int isEmpty(Queue *q) {
    return q->front == -1;
}

// Function to add a vehicle to the queue
void addVehicle(Queue *q, char *vehicle) {
    if (isFull(q)) {
        printf("Queue is full, can't add more vehicles.\n");
        return;
    }
    if (q->front == -1)
        q->front = 0;
    q->rear++;
    strcpy(q->vehicles[q->rear], vehicle);
    printf("%s added to the queue.\n", vehicle);
}

// Function to dispatch (remove) a vehicle from the queue
void dispatchVehicle(Queue *q) {
    if (isEmpty(q)) {
        printf("No vehicles in the queue to dispatch.\n");
        return;
    }
    printf("%s dispatched from the queue.\n", q->vehicles[q->front]);
    if (q->front == q->rear) {
        // Reset the queue if last vehicle is dispatched
        q->front = -1;
        q->rear = -1;
    } else {
        q->front++;
    }
}

// Function to view the queue
void viewQueue(Queue *q) {
    if (isEmpty(q)) {
        printf("No vehicles in the queue.\n");
        return;
    }
    printf("Vehicles in the queue:\n");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%s\n", q->vehicles[i]);
    }
}

int main() {
    Queue q;
    initializeQueue(&q);

    // Adding vehicles to the queue
    addVehicle(&q, "Ambulance");
    addVehicle(&q, "Fire Truck");
    addVehicle(&q, "Police Car");

    // View queue
    viewQueue(&q);

    // Dispatch vehicles
    dispatchVehicle(&q);
    dispatchVehicle(&q);

    // View queue after dispatch
    viewQueue(&q);

    // Dispatch remaining vehicle
    dispatchVehicle(&q);

    // Try to dispatch when queue is empty
    dispatchVehicle(&q);

    return 0;
}
